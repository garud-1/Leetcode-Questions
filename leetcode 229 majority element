Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]
 

Constraints:

1 <= nums.length <= 5 * 104
-109 <= nums[i] <= 109
 

Follow up: Could you solve the problem in linear time and in O(1) space?

ans:
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) 
    {
      vector<int> result;
      map<int,int>mp;

      for(int i=0;i<nums.size();i++)
      {
          if(mp.find(nums[i]) == mp.end())
          {
             mp[nums[i]] = 1;
          }
          else
          {
               mp[nums[i]]++;
          }
      } 
      for(auto i:mp)
      {
          if(i.second*3 > nums.size())
          {
            result.push_back(i.first);
          }
      }

      return result;

    }
};
